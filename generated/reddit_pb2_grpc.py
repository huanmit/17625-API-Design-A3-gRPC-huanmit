# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class RedditStub(object):
    """
    This parallel Reddit requires following API endpoints:
    ● Create a Post.
    ● Upvote or downvote a Post
    ● Retrieve Post content
    ● Create a Comment
    ● Upvote or downvote a Comment
    ● Retrieving a list of N most upvoted comments under a post, where N is a parameter to the call. The
    returned result should indicate whether there are replies under those comments.
    ● Expand a comment branch. This allows to open most N most upvoted comments under a given
    comment, alongside with N most upvoted comments under those comments. Essentially, a tree of
    depth 2.
    Extra credit (5pts)
    ● Monitor updates - client initiates the call with a post, with ability to 
    add comment IDs later in a stream. The server returns a stream of score 
    updates for the post and the comments.

    Define the Reddit service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.Reddit/CreatePost',
                request_serializer=reddit__pb2.CreatePostRequest.SerializeToString,
                response_deserializer=reddit__pb2.CreatePostResponse.FromString,
                )
        self.VotePost = channel.unary_unary(
                '/reddit.Reddit/VotePost',
                request_serializer=reddit__pb2.VotePostRequest.SerializeToString,
                response_deserializer=reddit__pb2.VotePostResponse.FromString,
                )
        self.GetPost = channel.unary_unary(
                '/reddit.Reddit/GetPost',
                request_serializer=reddit__pb2.GetPostRequest.SerializeToString,
                response_deserializer=reddit__pb2.GetPostResponse.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.Reddit/CreateComment',
                request_serializer=reddit__pb2.CreateCommentRequest.SerializeToString,
                response_deserializer=reddit__pb2.CreateCommentResponse.FromString,
                )
        self.VoteComment = channel.unary_unary(
                '/reddit.Reddit/VoteComment',
                request_serializer=reddit__pb2.VoteCommentRequest.SerializeToString,
                response_deserializer=reddit__pb2.VoteCommentResponse.FromString,
                )
        self.GetNComments = channel.unary_unary(
                '/reddit.Reddit/GetNComments',
                request_serializer=reddit__pb2.GetNCommentsRequest.SerializeToString,
                response_deserializer=reddit__pb2.GetNCommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/reddit.Reddit/ExpandCommentBranch',
                request_serializer=reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
                response_deserializer=reddit__pb2.ExpandCommentBranchResponse.FromString,
                )
        self.MonitorUpdates = channel.stream_stream(
                '/reddit.Reddit/MonitorUpdates',
                request_serializer=reddit__pb2.MonitorUpdatesRequest.SerializeToString,
                response_deserializer=reddit__pb2.MonitorUpdatesResponse.FromString,
                )


class RedditServicer(object):
    """
    This parallel Reddit requires following API endpoints:
    ● Create a Post.
    ● Upvote or downvote a Post
    ● Retrieve Post content
    ● Create a Comment
    ● Upvote or downvote a Comment
    ● Retrieving a list of N most upvoted comments under a post, where N is a parameter to the call. The
    returned result should indicate whether there are replies under those comments.
    ● Expand a comment branch. This allows to open most N most upvoted comments under a given
    comment, alongside with N most upvoted comments under those comments. Essentially, a tree of
    depth 2.
    Extra credit (5pts)
    ● Monitor updates - client initiates the call with a post, with ability to 
    add comment IDs later in a stream. The server returns a stream of score 
    updates for the post and the comments.

    Define the Reddit service
    """

    def CreatePost(self, request, context):
        """Create a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotePost(self, request, context):
        """Upvote or downvote a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPost(self, request, context):
        """Retrieve post content
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Create a comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteComment(self, request, context):
        """Upvote or downvote a comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNComments(self, request, context):
        """Retrieve a list of N most upvoted comments under a post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Expand a comment branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request_iterator, context):
        """Monitor updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.CreatePostRequest.FromString,
                    response_serializer=reddit__pb2.CreatePostResponse.SerializeToString,
            ),
            'VotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.VotePost,
                    request_deserializer=reddit__pb2.VotePostRequest.FromString,
                    response_serializer=reddit__pb2.VotePostResponse.SerializeToString,
            ),
            'GetPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPost,
                    request_deserializer=reddit__pb2.GetPostRequest.FromString,
                    response_serializer=reddit__pb2.GetPostResponse.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.CreateCommentRequest.FromString,
                    response_serializer=reddit__pb2.CreateCommentResponse.SerializeToString,
            ),
            'VoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteComment,
                    request_deserializer=reddit__pb2.VoteCommentRequest.FromString,
                    response_serializer=reddit__pb2.VoteCommentResponse.SerializeToString,
            ),
            'GetNComments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNComments,
                    request_deserializer=reddit__pb2.GetNCommentsRequest.FromString,
                    response_serializer=reddit__pb2.GetNCommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=reddit__pb2.ExpandCommentBranchRequest.FromString,
                    response_serializer=reddit__pb2.ExpandCommentBranchResponse.SerializeToString,
            ),
            'MonitorUpdates': grpc.stream_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=reddit__pb2.MonitorUpdatesRequest.FromString,
                    response_serializer=reddit__pb2.MonitorUpdatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.Reddit', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reddit(object):
    """
    This parallel Reddit requires following API endpoints:
    ● Create a Post.
    ● Upvote or downvote a Post
    ● Retrieve Post content
    ● Create a Comment
    ● Upvote or downvote a Comment
    ● Retrieving a list of N most upvoted comments under a post, where N is a parameter to the call. The
    returned result should indicate whether there are replies under those comments.
    ● Expand a comment branch. This allows to open most N most upvoted comments under a given
    comment, alongside with N most upvoted comments under those comments. Essentially, a tree of
    depth 2.
    Extra credit (5pts)
    ● Monitor updates - client initiates the call with a post, with ability to 
    add comment IDs later in a stream. The server returns a stream of score 
    updates for the post and the comments.

    Define the Reddit service
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/CreatePost',
            reddit__pb2.CreatePostRequest.SerializeToString,
            reddit__pb2.CreatePostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/VotePost',
            reddit__pb2.VotePostRequest.SerializeToString,
            reddit__pb2.VotePostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/GetPost',
            reddit__pb2.GetPostRequest.SerializeToString,
            reddit__pb2.GetPostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/CreateComment',
            reddit__pb2.CreateCommentRequest.SerializeToString,
            reddit__pb2.CreateCommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/VoteComment',
            reddit__pb2.VoteCommentRequest.SerializeToString,
            reddit__pb2.VoteCommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/GetNComments',
            reddit__pb2.GetNCommentsRequest.SerializeToString,
            reddit__pb2.GetNCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Reddit/ExpandCommentBranch',
            reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
            reddit__pb2.ExpandCommentBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/reddit.Reddit/MonitorUpdates',
            reddit__pb2.MonitorUpdatesRequest.SerializeToString,
            reddit__pb2.MonitorUpdatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
