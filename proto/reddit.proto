syntax = "proto3";

package reddit;

/*
This parallel Reddit requires following API endpoints:
● Create a Post.
● Upvote or downvote a Post
● Retrieve Post content
● Create a Comment
● Upvote or downvote a Comment
● Retrieving a list of N most upvoted comments under a post, where N is a parameter to the call. The
returned result should indicate whether there are replies under those comments.
● Expand a comment branch. This allows to open most N most upvoted comments under a given
comment, alongside with N most upvoted comments under those comments. Essentially, a tree of
depth 2.
Extra credit (5pts)
● Monitor updates - client initiates the call with a post, with ability to 
add comment IDs later in a stream. The server returns a stream of score 
updates for the post and the comments.
*/

// Define the Reddit service
service Reddit {
    // Create a post
    rpc CreatePost(CreatePostRequest) returns (CreatePostResponse);
    // Upvote or downvote a post
    rpc VotePost(VotePostRequest) returns (VotePostResponse);
    // Retrieve post content
    rpc GetPost(GetPostRequest) returns (GetPostResponse);
    // Create a comment
    rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse);
    // Upvote or downvote a comment
    rpc VoteComment(VoteCommentRequest) returns (VoteCommentResponse);
    // Retrieve a list of N most upvoted comments under a post
    rpc GetNComments(GetNCommentsRequest) returns (GetNCommentsResponse);
    // Expand a comment branch
    rpc ExpandCommentBranch(ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse);
    // Monitor updates
    rpc MonitorUpdates(stream MonitorUpdatesRequest) returns (stream MonitorUpdatesResponse);
}

/*
● User. All you need is actually a human readable user ID
● Post. Posts have a title, some text, and at most one of: a video or an image URL.
    ○ The author is optional in this parallel universe, for some reason.
    ○ Posts have a score, which can be negative.
    ○ Posts have a state: normal, locked, or hidden (another word for deleted).
    ○ Posts have a publication date.
● Comment. Comments are made by users, under a post or another comment.
    ○ Comments do have an author.
    ○ Just like Posts, comments have a score.
    ○ Comments can be normal or hidden, but not locked.
        ■ Note that reusing the post status ENUM will be considered a mistake; 
        these are two separate entities that can evolve in different directions.
    ○ Comments have a publication date.

● Subreddit - note that this portion will require changing other PBs (Post, at the very least)
    ○ Subreddits have a human-readable name
    ○ Posts belong to exactly one subreddit
    ○ Subreddits can be public, private, or hidden
    ○ Subreddits can define a set of tags that are attached to posts

*/

message User {
    string id = 1;
}

message Post {
    enum PostState {
        NORMAL = 0;
        LOCKED = 1;
        HIDDEN = 2;
    }

    string id = 1;
    string title = 2;
    string text = 3;
    oneof multi_media_url {
        string video_url = 5;
        string image_url = 6;
    }
    optional string author = 7;
    int32 score = 8;
    PostState state = 9;
    string sub_id = 10;
    string tag = 11;
    string publication_date = 12;
}

message Comment {
    enum CommentState {
        NORMAL = 0;
        HIDDEN = 1;
    }

    string id = 1;
    string host_id = 2;
    string text = 3;
    string author = 4;
    int32 score = 5;
    CommentState state = 6;
    string publication_date = 7;
}

message Subreddit {
    enum SubState {
        PUBLIC = 0;
        PRIVATE = 1;
        HIDDEN = 2;
    }

    string id = 1;
    string sub_name = 2;
    SubState state = 3;
    repeated string tags = 4;
}

// Define the request and response messages for each method
message CreatePostRequest {
    string title = 1;
    string text = 2;
    oneof multi_media_url {
        string video_url = 3;
        string image_url = 4;
    }
    optional string author = 5;
    string sub_id = 6;
    string tag = 7;
}

message CreatePostResponse {
    Post post = 1;
}

message VotePostRequest {
    string post_id = 1;
    string user_id = 2;
    bool if_upvote = 3;
}

message VotePostResponse {
    Post post = 1;
}

message GetPostRequest {
    string post_id = 1;
}

message GetPostResponse {
    Post post = 1;
}

message CreateCommentRequest {
    string host_id = 1;
    string text = 2;
    string author = 3;
}

message CreateCommentResponse {
    Comment comment = 1;
}

message VoteCommentRequest {
    string comment_id = 1;
    string user_id = 2;
    bool if_upvote = 3;
}

message VoteCommentResponse {
    Comment comment = 1;
}

message GetNCommentsRequest {
    string post_id = 1;
    int32 n = 2;
}

message GetNCommentsResponse {
    message CommentWithReplies {
        Comment comment = 1;
        bool if_has_replies = 2;
    }
    repeated CommentWithReplies comments = 1;
}

message ExpandCommentBranchRequest {
    string comment_id = 1;
    int32 n = 2;
}

message ExpandCommentBranchResponse {
    message CommentWithReplies {
        Comment comment = 1;
        repeated Comment replies = 2;
    }
    repeated CommentWithReplies comments = 1;
}

message MonitorUpdatesRequest {
    string post_id = 1;
    repeated string comment_id = 2;
}

message MonitorUpdatesResponse {
    int32 post_score = 1;
    repeated int32 comment_score = 2;
}